@model IEnumerable<Rolling_Tavern.Models.BoardGame>

@{
    ViewData["Title"] = "Index";
}

<div class="container page-content">
    <div class="row justify-content-md-center" style="margin-left:auto; margin-right:auto;">
        @if (Model?.Any() == true)
        {
            @foreach (var boardGame in Model)
            {

                    <div class="col-sm-4">
                        <div class="card" style="margin-bottom: 30px; margin-left: 20px; width: 275px; height: 380px; border-radius: 10px; box-shadow: 0.4em 0.4em 5px rgba(122,122,122,0.5);">
                            <div style="margin-left:auto; margin-right:auto; margin-top: 5px;">
                                @if (boardGame.Images != null)
                                {
                                <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
                                    <div class="carousel-inner">
                                        @{
                                            bool checkFirst = true;
                                        }
                                        @foreach (var photo in boardGame.Images)
                                        {
                                            if (checkFirst)
                                            {
                                                <div class="carousel-item active">
                                                    <img src="@photo.ImagePath" class="d-block w-100" style="max-height: 160px; max-width: 275px">
                                                </div>
                                                checkFirst = false;
                                            }
                                            else
                                            {
                                                <div class="carousel-item">
                                                    <img src="@photo.ImagePath" class="d-block w-100" style="max-height: 160px; max-width: 275px">
                                                </div>
                                            }
                                        }
                                    </div>
                                    <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="sr-only">Previous</span>
                                    </a>
                                    <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="sr-only">Next</span>
                                    </a>
                                </div>


                                }
                                else
                                {
                                    <img class="card-img-top" src="~/BoardGamesPicture/defaultBoardGame.jpg" style="max-height: 160px; max-width: 275px">
                                }
                            </div>
                            @{ 
                                double minTime = (double)boardGame.MinGameTime;
                                double maxTime = (double)boardGame.MaxGameTime;
                                string minTimeRes = "";
                                string maxTimeRes = "";
                                if(minTime>=60)
                                {
                                    minTimeRes += Math.Floor(minTime / 60).ToString();
                                    minTimeRes += "H ";
                                    if(minTime%60!=0)
                                    {
                                        minTimeRes += (minTime % 60).ToString();
                                        minTimeRes += "M";
                                    }
                                }
                                else
                                {
                                    minTimeRes += (minTime % 60).ToString();
                                    minTimeRes += "M";
                                }
                                if (maxTime >= 60)
                                {
                                    maxTimeRes += Math.Floor(maxTime / 60).ToString();
                                    maxTimeRes += "H ";
                                    if (maxTime % 60 != 0)
                                    {
                                        maxTimeRes += (maxTime % 60).ToString();
                                        maxTimeRes += "M";
                                    }
                                }
                                else
                                {
                                    maxTimeRes += (maxTime % 60).ToString();
                                    maxTimeRes += "M";
                                }
                            }
                            <a href="/BoardGames/Details/@boardGame.GameId">
                                <div class="card-body" style="text-align:center">
                                    <h5 class="card-title">@boardGame.GameName</h5>
                                    <h6 class="card-text"><img src="~/images/time.png" style="height: 30px; margin-bottom: 1%; display: inline-block; width: 30px"/> @minTimeRes- @maxTimeRes</h6>
                                    <h6 class="card-text"><img src="~/images/group.png" style="height: 30px; margin-bottom: 1%; display: inline-block; width: 30px"/> @boardGame.MinAmountOfPlayers - @boardGame.MaxAmountOfPlayers</h6>
                                    <h6 class="card-text"><img src="~/images/age.png" style="height: 30px; margin-bottom: 1%; display: inline-block; width: 30px"/> +@boardGame.MinAgeOfPlayers</h6>
                                    <h6 class="card-text"> Жанр гри: @boardGame.Genre</h6>
                                </div>
                            </a>
                        </div>

                    </div>

            }
        }
    </div>
</div>